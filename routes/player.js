// src/routes/player.js
import express from 'express';
import crypto from 'crypto';
import pool from '../db.js';

const router = express.Router();
const BOT_TOKEN = process.env.BOT_TOKEN;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ initData (–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
function verifyInitData(initData) {
  const parsed = new URLSearchParams(initData);
  const hash = parsed.get('hash');
  parsed.delete('hash');

  const dataCheckString = [...parsed.entries()]
    .map(([k, v]) => `${k}=${v}`)
    .sort()
    .join('\n');

  const secretPart = BOT_TOKEN.includes(':') ? BOT_TOKEN.split(':')[1] : BOT_TOKEN;
  const secret = crypto.createHash('sha256').update(secretPart).digest();
  const hmac = crypto.createHmac('sha256', secret).update(dataCheckString).digest('hex');

  return hmac === hash;
}

/**
 * POST /api/init
 * –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –ø–æ Telegram ID.
 * –û–∂–∏–¥–∞–µ—Ç JSON { tg_id, name, initData }
 */
router.post('/init', async (req, res) => {
  const { tg_id, name, initData } = req.body;

  if (!tg_id || !initData) {
    return res.status(400).json({ ok: false, error: 'tg_id and initData are required' });
  }
  if (!BOT_TOKEN) {
    return res.status(500).json({ ok: false, error: 'Server misconfiguration' });
  }

  // üîß –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ initData, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
  // if (!verifyInitData(initData)) {
  //   return res.status(403).json({ ok: false, error: 'Invalid initData signature' });
  // }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
    const exists = await pool.query(
      `SELECT tg_id, name, fragments, created_at
         FROM players
        WHERE tg_id = $1
        LIMIT 1`,
      [tg_id]
    );

    if (exists.rows.length > 0) {
      return res.json({ ok: true, user: exists.rows[0] });
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const result = await pool.query(
      `INSERT INTO players (tg_id, name)
       VALUES ($1, $2)
       RETURNING tg_id, name, fragments, created_at`,
      [tg_id, name || null]
    );

    res.json({ ok: true, user: result.rows[0] });
  } catch (err) {
    console.error('POST /api/init error:', err);
    res.status(500).json({ ok: false, error: 'Internal server error' });
  }
});

// (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

export default router;
