===== FILE: .env =====
    BOT_TOKEN=7555919988:AAHOpQ-XMV1-qfHoFxQcxGLvw7pTRVIvvNk
    DATABASE_URL=postgresql://postgres:SXzXeCLXYHExMRkahFLJqjyCxvElwrht@postgres.railway.internal:5432/railway
    FINAL_PHRASE_TEMPLATE="The Final Shape"
    JWT_SECRET=9f2c3f4a8b1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7
    TON_WALLET_ADDRESS=UQACrhNgqbnXz4AKGHGunBme4g6bHmYQ4jO6rVeiwlyujZPA
    TON_RPC_ENDPOINT=https://rpc.tonhub.com
    PGSSLMODE=disable
    FRAG_HMAC_SECRET=fa1b2c3d4e5f60718293a4b5c6d7e8f90a1b2c3d4e5f60718293a4b5c6d7e8f9
    VITE_API_BASE_URL=https://ash-backend-production.up.railway.app

===== FILE: db.js =====
    /* Order-of-Ash В· db.js вЂ” v2.2
       в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ
       вЂў pool.max в†‘ 15  (Р±С‹Р»Рѕ 5)
       вЂў statement_timeout = 5000 РјСЃ РґР»СЏ РІСЃРµС… РЅРѕРІС‹С… СЃРѕРµРґРёРЅРµРЅРёР№
    */
    
    import pg     from 'pg';
    import dotenv from 'dotenv';
    
    dotenv.config();
    
    console.log('в„№пёЏ  ENV DATABASE_URL =', process.env.DATABASE_URL);
    
    const pool = new pg.Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: false,                 // РІРЅСѓС‚СЂРµРЅРЅРёР№ Railway в†’ SSL РЅРµ РЅСѓР¶РµРЅ
      max: 15,                    // в†ђ СѓРІРµР»РёС‡РёР»Рё Р·Р°РїР°СЃ СЃРѕРµРґРёРЅРµРЅРёР№
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 5000,
    });
    
    /* statement_timeout = 5 s вЂ” РґР»СЏ Р»СЋР±РѕРіРѕ РЅРѕРІРѕРіРѕ РєР»РёРµРЅС‚Р° */
    pool.on('connect', client => {
      client.query('SET statement_timeout TO 5000')
            .catch(err => console.error('вќЊ failed to set statement_timeout:', err));
    });
    
    pool.on('error', err => {
      console.error('вќЊ PG pool error:', err.code, err.message);
    });
    
    /* Р±С‹СЃС‚СЂР°СЏ РїСЂРѕРІРµСЂРєР° РєРѕРЅРЅРµРєС‚Р° РїСЂРё СЃС‚Р°СЂС‚Рµ */
    (async () => {
      try {
        const client = await pool.connect();
        console.log('вњ… PG initial connection successful');
        client.release();
      } catch (err) {
        console.error('вќЊ PG initial connection failed:', err.code, err.message);
      }
    })();
    
    export default pool;

===== FILE: index.js =====
    // index.js
    import express     from 'express';
    import helmet      from 'helmet';
    import cors        from 'cors';
    import rateLimit   from 'express-rate-limit';
    import dotenv      from 'dotenv';
    import morgan      from 'morgan';
    import path        from 'path';
    import crypto      from 'crypto';
    
    import './worker/check-payments.js';
    import validateRoute       from './routes/validate.js';
    import validateFinalRoute  from './routes/validateFinal.js';
    import playerRoutes        from './routes/player.js';  // Р·РґРµСЃСЊ init, player/:tg_id Рё РІСЃС‘ РѕСЃС‚Р°Р»СЊРЅРѕРµ
    import { authenticate }    from './middleware/auth.js';
    
    if (process.env.NODE_ENV !== 'production') dotenv.config();
    
    const app = express();
    app.set('trust proxy', 1);
    
    // 1) Security, logging, JSON
    app.use(helmet({ crossOriginResourcePolicy: false }));
    app.use(morgan('dev'));
    app.use(express.json({ limit: '10kb' }));
    
    // 2) UI-Static (С„РѕРЅРѕРІС‹Рµ РєР°СЂС‚РёРЅРєРё)
    app.use(
      '/images',
      express.static(path.join(process.cwd(), 'public', 'images'))
    );
    
    // 3) CORS for /api
    const ALLOWED = [
      'https://clean-ash-order.vercel.app',
      /\.telegram\.org$/,
      /\.up\.railway\.app$/
    ];
    app.use(
      '/api',
      cors({
        origin(origin, cb) {
          if (!origin) return cb(null, true);
          if (ALLOWED.some(x => x instanceof RegExp ? x.test(origin) : x === origin))
            return cb(null, true);
          cb(new Error(`CORS blocked: ${origin}`));
        },
        methods: ['GET','POST','DELETE','OPTIONS'],
        allowedHeaders: ['Content-Type','Authorization'],
      })
    );
    app.options('/api/*', cors());
    
    // 4) Rate-limit for validate
    const validateLimiter = rateLimit({
      windowMs: 15*60*1000,
      max: 30,
      standardHeaders: true,
      legacyHeaders: false,
      message: { error: 'Too many requests, please try later.' },
    });
    
    // 5) Public validation routes
    app.use('/api/validate', validateLimiter, validateRoute);
    app.use('/api/validate-final', validateLimiter, validateFinalRoute);
    
    // 6) Signed URLs for fragments (needs JWT)
    const FRAG_DIR   = path.join(process.cwd(), 'public', 'fragments');
    const FRAG_FILES = [ /* ...РІР°С€ СЃРїРёСЃРѕРє С„Р°Р№Р»РѕРІ... */ ];
    const FINAL_FILE = 'final-image.jpg';
    const HMAC_SECRET = process.env.FRAG_HMAC_SECRET;
    if (!HMAC_SECRET) console.error('вљ пёЏ FRAG_HMAC_SECRET not set');
    
    app.get(
      '/api/fragments/urls',
      authenticate,
      (req, res) => {
        try {
          const TTL = 5*60*1000;
          const now = Date.now();
          const signedUrls = {};
          for (const name of [...FRAG_FILES, FINAL_FILE]) {
            const exp     = now + TTL;
            const payload = `${name}|${exp}`;
            const sig     = crypto
              .createHmac('sha256', HMAC_SECRET)
              .update(payload)
              .digest('hex');
            signedUrls[name] = `${req.protocol}://${req.get('host')}` +
              `/fragments/${encodeURIComponent(name)}?exp=${exp}&sig=${sig}`;
          }
          res.json({ signedUrls });
        } catch (err) {
          console.error('[fragments/urls]', err);
          res.status(500).json({ error: 'internal' });
        }
      }
    );
    
    // 7) Mount all game routes (init, getPlayer, burn, fragments, referral, etc.)
    //    РІРЅСѓС‚СЂРё playerRoutes СѓР¶Рµ РµСЃС‚СЊ authenticate РґР»СЏ Р·Р°С‰РёС‰С‘РЅРЅС‹С… РјР°СЂС€СЂСѓС‚РѕРІ
    app.use('/api', playerRoutes);
    
    // 8) HMAC-protected delivery of fragment files
    app.get('/fragments/:name', (req, res, next) => {
      const { name } = req.params;
      if (![...FRAG_FILES, FINAL_FILE].includes(name)) return next();
    
      const exp = Number(req.query.exp || 0);
      const sig = req.query.sig || '';
      if (Date.now() > exp) return res.status(403).json({ error: 'Link expired' });
    
      const expected = crypto
        .createHmac('sha256', HMAC_SECRET)
        .update(`${name}|${exp}`)
        .digest('hex');
      if (sig !== expected) return res.status(403).json({ error: 'Invalid signature' });
    
      res.set('Access-Control-Allow-Origin','*');
      res.set('Cross-Origin-Resource-Policy','cross-origin');
      res.sendFile(path.join(FRAG_DIR, name));
    });
    
    // 9) Health-check
    app.get('/', (_req, res) => res.sendStatus(200));
    
    // 10) Start server
    const PORT = Number(process.env.PORT || 3000);
    app.listen(PORT, () => console.log(`рџџў Listening on port ${PORT}`));

===== FILE: middleware\auth.js =====
    // src/middleware/auth.js
    import jwt from 'jsonwebtoken';
    
    const JWT_SECRET = process.env.JWT_SECRET;
    if (!JWT_SECRET) {
      console.error('вљ пёЏ JWT_SECRET is not set in .env');
    }
    
    export function authenticate(req, res, next) {
      const authHeader = req.headers['authorization'] || '';
      const [scheme, token] = authHeader.split(' ');
      if (scheme !== 'Bearer' || !token) {
        return res.status(401).json({ error: 'No token provided' });
      }
      try {
        const payload = jwt.verify(token, JWT_SECRET);
        req.user = payload; // payload: { tg_id, name, iat, exp }
        next();
      } catch (err) {
        return res.status(401).json({ error: 'Invalid token' });
      }
    }

===== FILE: package.json =====
    {
      "name": "ash-backend",
      "version": "1.0.0",
      "type": "module",
      "main": "index.js",
      "scripts": {
        "start": "node index.js",
        "check-payments": "node worker/check-payments.js"
      },
      "dependencies": {
        "cors": "^2.8.5",
        "dotenv": "^16.0.3",
        "express": "^4.18.2",
        "express-rate-limit": "^7.5.0",
        "helmet": "^8.1.0",
        "jsonwebtoken": "^9.0.2",
        "morgan": "^1.10.0",
        "node-fetch": "^3.3.2",
        "pg": "^8.11.1",
        "uuid": "^11.1.0"
      }
    }

===== FILE: package-lock.json =====
    {
      "name": "ash-backend",
      "version": "1.0.0",
      "lockfileVersion": 3,
      "requires": true,
      "packages": {
        "": {
          "name": "ash-backend",
          "version": "1.0.0",
          "dependencies": {
            "cors": "^2.8.5",
            "dotenv": "^16.0.3",
            "express": "^4.18.2",
            "express-rate-limit": "^7.5.0",
            "helmet": "^8.1.0",
            "jsonwebtoken": "^9.0.2",
            "morgan": "^1.10.0",
            "node-fetch": "^3.3.2",
            "pg": "^8.11.1",
            "uuid": "^11.1.0"
          }
        },
        "node_modules/accepts": {
          "version": "1.3.8",
          "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
          "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
          "license": "MIT",
          "dependencies": {
            "mime-types": "~2.1.34",
            "negotiator": "0.6.3"
          },
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/array-flatten": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
          "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
          "license": "MIT"
        },
        "node_modules/basic-auth": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
          "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
          "license": "MIT",
          "dependencies": {
            "safe-buffer": "5.1.2"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/basic-auth/node_modules/safe-buffer": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
          "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
          "license": "MIT"
        },
        "node_modules/body-parser": {
          "version": "1.20.3",
          "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
          "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
          "license": "MIT",
          "dependencies": {
            "bytes": "3.1.2",
            "content-type": "~1.0.5",
            "debug": "2.6.9",
            "depd": "2.0.0",
            "destroy": "1.2.0",
            "http-errors": "2.0.0",
            "iconv-lite": "0.4.24",
            "on-finished": "2.4.1",
            "qs": "6.13.0",
            "raw-body": "2.5.2",
            "type-is": "~1.6.18",
            "unpipe": "1.0.0"
          },
          "engines": {
            "node": ">= 0.8",
            "npm": "1.2.8000 || >= 1.4.16"
          }
        },
        "node_modules/buffer-equal-constant-time": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
          "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
          "license": "BSD-3-Clause"
        },
        "node_modules/bytes": {
          "version": "3.1.2",
          "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
          "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/call-bind-apply-helpers": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
          "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
          "license": "MIT",
          "dependencies": {
            "es-errors": "^1.3.0",
            "function-bind": "^1.1.2"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/call-bound": {
          "version": "1.0.4",
          "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
          "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
          "license": "MIT",
          "dependencies": {
            "call-bind-apply-helpers": "^1.0.2",
            "get-intrinsic": "^1.3.0"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/content-disposition": {
          "version": "0.5.4",
          "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
          "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
          "license": "MIT",
          "dependencies": {
            "safe-buffer": "5.2.1"
          },
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/content-type": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
          "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/cookie": {
          "version": "0.7.1",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
          "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/cookie-signature": {
          "version": "1.0.6",
          "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
          "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
          "license": "MIT"
        },
        "node_modules/cors": {
          "version": "2.8.5",
          "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
          "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
          "license": "MIT",
          "dependencies": {
            "object-assign": "^4",
            "vary": "^1"
          },
          "engines": {
            "node": ">= 0.10"
          }
        },
        "node_modules/data-uri-to-buffer": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz",
          "integrity": "sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==",
          "license": "MIT",
          "engines": {
            "node": ">= 12"
          }
        },
        "node_modules/debug": {
          "version": "2.6.9",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
          "license": "MIT",
          "dependencies": {
            "ms": "2.0.0"
          }
        },
        "node_modules/depd": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
          "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/destroy": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
          "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8",
            "npm": "1.2.8000 || >= 1.4.16"
          }
        },
        "node_modules/dotenv": {
          "version": "16.5.0",
          "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
          "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
          "license": "BSD-2-Clause",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://dotenvx.com"
          }
        },
        "node_modules/dunder-proto": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
          "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
          "license": "MIT",
          "dependencies": {
            "call-bind-apply-helpers": "^1.0.1",
            "es-errors": "^1.3.0",
            "gopd": "^1.2.0"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/ecdsa-sig-formatter": {
          "version": "1.0.11",
          "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
          "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
          "license": "Apache-2.0",
          "dependencies": {
            "safe-buffer": "^5.0.1"
          }
        },
        "node_modules/ee-first": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
          "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
          "license": "MIT"
        },
        "node_modules/encodeurl": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
          "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/es-define-property": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
          "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/es-errors": {
          "version": "1.3.0",
          "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
          "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/es-object-atoms": {
          "version": "1.1.1",
          "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
          "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
          "license": "MIT",
          "dependencies": {
            "es-errors": "^1.3.0"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/escape-html": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
          "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
          "license": "MIT"
        },
        "node_modules/etag": {
          "version": "1.8.1",
          "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
          "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/express": {
          "version": "4.21.2",
          "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
          "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
          "license": "MIT",
          "dependencies": {
            "accepts": "~1.3.8",
            "array-flatten": "1.1.1",
            "body-parser": "1.20.3",
            "content-disposition": "0.5.4",
            "content-type": "~1.0.4",
            "cookie": "0.7.1",
            "cookie-signature": "1.0.6",
            "debug": "2.6.9",
            "depd": "2.0.0",
            "encodeurl": "~2.0.0",
            "escape-html": "~1.0.3",
            "etag": "~1.8.1",
            "finalhandler": "1.3.1",
            "fresh": "0.5.2",
            "http-errors": "2.0.0",
            "merge-descriptors": "1.0.3",
            "methods": "~1.1.2",
            "on-finished": "2.4.1",
            "parseurl": "~1.3.3",
            "path-to-regexp": "0.1.12",
            "proxy-addr": "~2.0.7",
            "qs": "6.13.0",
            "range-parser": "~1.2.1",
            "safe-buffer": "5.2.1",
            "send": "0.19.0",
            "serve-static": "1.16.2",
            "setprototypeof": "1.2.0",
            "statuses": "2.0.1",
            "type-is": "~1.6.18",
            "utils-merge": "1.0.1",
            "vary": "~1.1.2"
          },
          "engines": {
            "node": ">= 0.10.0"
          },
          "funding": {
            "type": "opencollective",
            "url": "https://opencollective.com/express"
          }
        },
        "node_modules/express-rate-limit": {
          "version": "7.5.0",
          "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
          "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
          "license": "MIT",
          "engines": {
            "node": ">= 16"
          },
          "funding": {
            "url": "https://github.com/sponsors/express-rate-limit"
          },
          "peerDependencies": {
            "express": "^4.11 || 5 || ^5.0.0-beta.1"
          }
        },
        "node_modules/fetch-blob": {
          "version": "3.2.0",
          "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
          "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
          "funding": [
            {
              "type": "github",
              "url": "https://github.com/sponsors/jimmywarting"
            },
            {
              "type": "paypal",
              "url": "https://paypal.me/jimmywarting"
            }
          ],
          "license": "MIT",
          "dependencies": {
            "node-domexception": "^1.0.0",
            "web-streams-polyfill": "^3.0.3"
          },
          "engines": {
            "node": "^12.20 || >= 14.13"
          }
        },
        "node_modules/finalhandler": {
          "version": "1.3.1",
          "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
          "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
          "license": "MIT",
          "dependencies": {
            "debug": "2.6.9",
            "encodeurl": "~2.0.0",
            "escape-html": "~1.0.3",
            "on-finished": "2.4.1",
            "parseurl": "~1.3.3",
            "statuses": "2.0.1",
            "unpipe": "~1.0.0"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/formdata-polyfill": {
          "version": "4.0.10",
          "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
          "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
          "license": "MIT",
          "dependencies": {
            "fetch-blob": "^3.1.2"
          },
          "engines": {
            "node": ">=12.20.0"
          }
        },
        "node_modules/forwarded": {
          "version": "0.2.0",
          "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
          "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/fresh": {
          "version": "0.5.2",
          "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
          "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/function-bind": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
          "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
          "license": "MIT",
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/get-intrinsic": {
          "version": "1.3.0",
          "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
          "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
          "license": "MIT",
          "dependencies": {
            "call-bind-apply-helpers": "^1.0.2",
            "es-define-property": "^1.0.1",
            "es-errors": "^1.3.0",
            "es-object-atoms": "^1.1.1",
            "function-bind": "^1.1.2",
            "get-proto": "^1.0.1",
            "gopd": "^1.2.0",
            "has-symbols": "^1.1.0",
            "hasown": "^2.0.2",
            "math-intrinsics": "^1.1.0"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/get-proto": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
          "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
          "license": "MIT",
          "dependencies": {
            "dunder-proto": "^1.0.1",
            "es-object-atoms": "^1.0.0"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/gopd": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
          "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/has-symbols": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
          "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/hasown": {
          "version": "2.0.2",
          "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
          "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
          "license": "MIT",
          "dependencies": {
            "function-bind": "^1.1.2"
          },
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/helmet": {
          "version": "8.1.0",
          "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.1.0.tgz",
          "integrity": "sha512-jOiHyAZsmnr8LqoPGmCjYAaiuWwjAPLgY8ZX2XrmHawt99/u1y6RgrZMTeoPfpUbV96HOalYgz1qzkRbw54Pmg==",
          "license": "MIT",
          "engines": {
            "node": ">=18.0.0"
          }
        },
        "node_modules/http-errors": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
          "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
          "license": "MIT",
          "dependencies": {
            "depd": "2.0.0",
            "inherits": "2.0.4",
            "setprototypeof": "1.2.0",
            "statuses": "2.0.1",
            "toidentifier": "1.0.1"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/iconv-lite": {
          "version": "0.4.24",
          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
          "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
          "license": "MIT",
          "dependencies": {
            "safer-buffer": ">= 2.1.2 < 3"
          },
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/inherits": {
          "version": "2.0.4",
          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
          "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
          "license": "ISC"
        },
        "node_modules/ipaddr.js": {
          "version": "1.9.1",
          "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
          "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.10"
          }
        },
        "node_modules/jsonwebtoken": {
          "version": "9.0.2",
          "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
          "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
          "license": "MIT",
          "dependencies": {
            "jws": "^3.2.2",
            "lodash.includes": "^4.3.0",
            "lodash.isboolean": "^3.0.3",
            "lodash.isinteger": "^4.0.4",
            "lodash.isnumber": "^3.0.3",
            "lodash.isplainobject": "^4.0.6",
            "lodash.isstring": "^4.0.1",
            "lodash.once": "^4.0.0",
            "ms": "^2.1.1",
            "semver": "^7.5.4"
          },
          "engines": {
            "node": ">=12",
            "npm": ">=6"
          }
        },
        "node_modules/jsonwebtoken/node_modules/ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "license": "MIT"
        },
        "node_modules/jwa": {
          "version": "1.4.2",
          "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
          "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
          "license": "MIT",
          "dependencies": {
            "buffer-equal-constant-time": "^1.0.1",
            "ecdsa-sig-formatter": "1.0.11",
            "safe-buffer": "^5.0.1"
          }
        },
        "node_modules/jws": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
          "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
          "license": "MIT",
          "dependencies": {
            "jwa": "^1.4.1",
            "safe-buffer": "^5.0.1"
          }
        },
        "node_modules/lodash.includes": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
          "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
          "license": "MIT"
        },
        "node_modules/lodash.isboolean": {
          "version": "3.0.3",
          "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
          "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
          "license": "MIT"
        },
        "node_modules/lodash.isinteger": {
          "version": "4.0.4",
          "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
          "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
          "license": "MIT"
        },
        "node_modules/lodash.isnumber": {
          "version": "3.0.3",
          "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
          "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
          "license": "MIT"
        },
        "node_modules/lodash.isplainobject": {
          "version": "4.0.6",
          "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
          "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
          "license": "MIT"
        },
        "node_modules/lodash.isstring": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
          "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
          "license": "MIT"
        },
        "node_modules/lodash.once": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
          "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
          "license": "MIT"
        },
        "node_modules/math-intrinsics": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
          "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          }
        },
        "node_modules/media-typer": {
          "version": "0.3.0",
          "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
          "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/merge-descriptors": {
          "version": "1.0.3",
          "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
          "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
          "license": "MIT",
          "funding": {
            "url": "https://github.com/sponsors/sindresorhus"
          }
        },
        "node_modules/methods": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
          "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/mime": {
          "version": "1.6.0",
          "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
          "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
          "license": "MIT",
          "bin": {
            "mime": "cli.js"
          },
          "engines": {
            "node": ">=4"
          }
        },
        "node_modules/mime-db": {
          "version": "1.52.0",
          "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
          "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/mime-types": {
          "version": "2.1.35",
          "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
          "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
          "license": "MIT",
          "dependencies": {
            "mime-db": "1.52.0"
          },
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/morgan": {
          "version": "1.10.0",
          "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
          "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
          "license": "MIT",
          "dependencies": {
            "basic-auth": "~2.0.1",
            "debug": "2.6.9",
            "depd": "~2.0.0",
            "on-finished": "~2.3.0",
            "on-headers": "~1.0.2"
          },
          "engines": {
            "node": ">= 0.8.0"
          }
        },
        "node_modules/morgan/node_modules/on-finished": {
          "version": "2.3.0",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
          "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
          "license": "MIT",
          "dependencies": {
            "ee-first": "1.1.1"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/ms": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
          "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
          "license": "MIT"
        },
        "node_modules/negotiator": {
          "version": "0.6.3",
          "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
          "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/node-domexception": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
          "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
          "deprecated": "Use your platform's native DOMException instead",
          "funding": [
            {
              "type": "github",
              "url": "https://github.com/sponsors/jimmywarting"
            },
            {
              "type": "github",
              "url": "https://paypal.me/jimmywarting"
            }
          ],
          "license": "MIT",
          "engines": {
            "node": ">=10.5.0"
          }
        },
        "node_modules/node-fetch": {
          "version": "3.3.2",
          "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz",
          "integrity": "sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==",
          "license": "MIT",
          "dependencies": {
            "data-uri-to-buffer": "^4.0.0",
            "fetch-blob": "^3.1.4",
            "formdata-polyfill": "^4.0.10"
          },
          "engines": {
            "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
          },
          "funding": {
            "type": "opencollective",
            "url": "https://opencollective.com/node-fetch"
          }
        },
        "node_modules/object-assign": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
          "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
          "license": "MIT",
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/object-inspect": {
          "version": "1.13.4",
          "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
          "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/on-finished": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
          "license": "MIT",
          "dependencies": {
            "ee-first": "1.1.1"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/on-headers": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
          "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/parseurl": {
          "version": "1.3.3",
          "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
          "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/path-to-regexp": {
          "version": "0.1.12",
          "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
          "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
          "license": "MIT"
        },
        "node_modules/pg": {
          "version": "8.16.0",
          "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.0.tgz",
          "integrity": "sha512-7SKfdvP8CTNXjMUzfcVTaI+TDzBEeaUnVwiVGZQD1Hh33Kpev7liQba9uLd4CfN8r9mCVsD0JIpq03+Unpz+kg==",
          "license": "MIT",
          "dependencies": {
            "pg-connection-string": "^2.9.0",
            "pg-pool": "^3.10.0",
            "pg-protocol": "^1.10.0",
            "pg-types": "2.2.0",
            "pgpass": "1.0.5"
          },
          "engines": {
            "node": ">= 8.0.0"
          },
          "optionalDependencies": {
            "pg-cloudflare": "^1.2.5"
          },
          "peerDependencies": {
            "pg-native": ">=3.0.1"
          },
          "peerDependenciesMeta": {
            "pg-native": {
              "optional": true
            }
          }
        },
        "node_modules/pg-cloudflare": {
          "version": "1.2.5",
          "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.5.tgz",
          "integrity": "sha512-OOX22Vt0vOSRrdoUPKJ8Wi2OpE/o/h9T8X1s4qSkCedbNah9ei2W2765be8iMVxQUsvgT7zIAT2eIa9fs5+vtg==",
          "license": "MIT",
          "optional": true
        },
        "node_modules/pg-connection-string": {
          "version": "2.9.0",
          "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.9.0.tgz",
          "integrity": "sha512-P2DEBKuvh5RClafLngkAuGe9OUlFV7ebu8w1kmaaOgPcpJd1RIFh7otETfI6hAR8YupOLFTY7nuvvIn7PLciUQ==",
          "license": "MIT"
        },
        "node_modules/pg-int8": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
          "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
          "license": "ISC",
          "engines": {
            "node": ">=4.0.0"
          }
        },
        "node_modules/pg-pool": {
          "version": "3.10.0",
          "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.10.0.tgz",
          "integrity": "sha512-DzZ26On4sQ0KmqnO34muPcmKbhrjmyiO4lCCR0VwEd7MjmiKf5NTg/6+apUEu0NF7ESa37CGzFxH513CoUmWnA==",
          "license": "MIT",
          "peerDependencies": {
            "pg": ">=8.0"
          }
        },
        "node_modules/pg-protocol": {
          "version": "1.10.0",
          "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.10.0.tgz",
          "integrity": "sha512-IpdytjudNuLv8nhlHs/UrVBhU0e78J0oIS/0AVdTbWxSOkFUVdsHC/NrorO6nXsQNDTT1kzDSOMJubBQviX18Q==",
          "license": "MIT"
        },
        "node_modules/pg-types": {
          "version": "2.2.0",
          "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
          "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
          "license": "MIT",
          "dependencies": {
            "pg-int8": "1.0.1",
            "postgres-array": "~2.0.0",
            "postgres-bytea": "~1.0.0",
            "postgres-date": "~1.0.4",
            "postgres-interval": "^1.1.0"
          },
          "engines": {
            "node": ">=4"
          }
        },
        "node_modules/pgpass": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
          "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
          "license": "MIT",
          "dependencies": {
            "split2": "^4.1.0"
          }
        },
        "node_modules/postgres-array": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
          "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
          "license": "MIT",
          "engines": {
            "node": ">=4"
          }
        },
        "node_modules/postgres-bytea": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
          "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
          "license": "MIT",
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/postgres-date": {
          "version": "1.0.7",
          "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
          "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
          "license": "MIT",
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/postgres-interval": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
          "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
          "license": "MIT",
          "dependencies": {
            "xtend": "^4.0.0"
          },
          "engines": {
            "node": ">=0.10.0"
          }
        },
        "node_modules/proxy-addr": {
          "version": "2.0.7",
          "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
          "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
          "license": "MIT",
          "dependencies": {
            "forwarded": "0.2.0",
            "ipaddr.js": "1.9.1"
          },
          "engines": {
            "node": ">= 0.10"
          }
        },
        "node_modules/qs": {
          "version": "6.13.0",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
          "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
          "license": "BSD-3-Clause",
          "dependencies": {
            "side-channel": "^1.0.6"
          },
          "engines": {
            "node": ">=0.6"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/range-parser": {
          "version": "1.2.1",
          "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
          "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/raw-body": {
          "version": "2.5.2",
          "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
          "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
          "license": "MIT",
          "dependencies": {
            "bytes": "3.1.2",
            "http-errors": "2.0.0",
            "iconv-lite": "0.4.24",
            "unpipe": "1.0.0"
          },
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/safe-buffer": {
          "version": "5.2.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
          "funding": [
            {
              "type": "github",
              "url": "https://github.com/sponsors/feross"
            },
            {
              "type": "patreon",
              "url": "https://www.patreon.com/feross"
            },
            {
              "type": "consulting",
              "url": "https://feross.org/support"
            }
          ],
          "license": "MIT"
        },
        "node_modules/safer-buffer": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
          "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "license": "MIT"
        },
        "node_modules/semver": {
          "version": "7.7.2",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
          "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
          "license": "ISC",
          "bin": {
            "semver": "bin/semver.js"
          },
          "engines": {
            "node": ">=10"
          }
        },
        "node_modules/send": {
          "version": "0.19.0",
          "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
          "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
          "license": "MIT",
          "dependencies": {
            "debug": "2.6.9",
            "depd": "2.0.0",
            "destroy": "1.2.0",
            "encodeurl": "~1.0.2",
            "escape-html": "~1.0.3",
            "etag": "~1.8.1",
            "fresh": "0.5.2",
            "http-errors": "2.0.0",
            "mime": "1.6.0",
            "ms": "2.1.3",
            "on-finished": "2.4.1",
            "range-parser": "~1.2.1",
            "statuses": "2.0.1"
          },
          "engines": {
            "node": ">= 0.8.0"
          }
        },
        "node_modules/send/node_modules/encodeurl": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
          "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/send/node_modules/ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
          "license": "MIT"
        },
        "node_modules/serve-static": {
          "version": "1.16.2",
          "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
          "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
          "license": "MIT",
          "dependencies": {
            "encodeurl": "~2.0.0",
            "escape-html": "~1.0.3",
            "parseurl": "~1.3.3",
            "send": "0.19.0"
          },
          "engines": {
            "node": ">= 0.8.0"
          }
        },
        "node_modules/setprototypeof": {
          "version": "1.2.0",
          "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
          "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
          "license": "ISC"
        },
        "node_modules/side-channel": {
          "version": "1.1.0",
          "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
          "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
          "license": "MIT",
          "dependencies": {
            "es-errors": "^1.3.0",
            "object-inspect": "^1.13.3",
            "side-channel-list": "^1.0.0",
            "side-channel-map": "^1.0.1",
            "side-channel-weakmap": "^1.0.2"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/side-channel-list": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
          "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
          "license": "MIT",
          "dependencies": {
            "es-errors": "^1.3.0",
            "object-inspect": "^1.13.3"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/side-channel-map": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
          "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
          "license": "MIT",
          "dependencies": {
            "call-bound": "^1.0.2",
            "es-errors": "^1.3.0",
            "get-intrinsic": "^1.2.5",
            "object-inspect": "^1.13.3"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/side-channel-weakmap": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
          "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
          "license": "MIT",
          "dependencies": {
            "call-bound": "^1.0.2",
            "es-errors": "^1.3.0",
            "get-intrinsic": "^1.2.5",
            "object-inspect": "^1.13.3",
            "side-channel-map": "^1.0.1"
          },
          "engines": {
            "node": ">= 0.4"
          },
          "funding": {
            "url": "https://github.com/sponsors/ljharb"
          }
        },
        "node_modules/split2": {
          "version": "4.2.0",
          "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
          "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
          "license": "ISC",
          "engines": {
            "node": ">= 10.x"
          }
        },
        "node_modules/statuses": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
          "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/toidentifier": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
          "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
          "license": "MIT",
          "engines": {
            "node": ">=0.6"
          }
        },
        "node_modules/type-is": {
          "version": "1.6.18",
          "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
          "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
          "license": "MIT",
          "dependencies": {
            "media-typer": "0.3.0",
            "mime-types": "~2.1.24"
          },
          "engines": {
            "node": ">= 0.6"
          }
        },
        "node_modules/unpipe": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
          "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/utils-merge": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
          "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.4.0"
          }
        },
        "node_modules/uuid": {
          "version": "11.1.0",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
          "integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
          "funding": [
            "https://github.com/sponsors/broofa",
            "https://github.com/sponsors/ctavan"
          ],
          "license": "MIT",
          "bin": {
            "uuid": "dist/esm/bin/uuid"
          }
        },
        "node_modules/vary": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
          "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
          "license": "MIT",
          "engines": {
            "node": ">= 0.8"
          }
        },
        "node_modules/web-streams-polyfill": {
          "version": "3.3.3",
          "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
          "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
          "license": "MIT",
          "engines": {
            "node": ">= 8"
          }
        },
        "node_modules/xtend": {
          "version": "4.0.2",
          "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
          "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
          "license": "MIT",
          "engines": {
            "node": ">=0.4"
          }
        }
      }
    }

===== FILE: routes\final.js =====
    // src/routes/final.js
    import express    from 'express';
    import pool       from '../db.js';
    import { authenticate } from '../middleware/auth.js';
    
    const router = express.Router();
    
    // GET /api/final/:tg_id
    // РџРѕРєР° Р±РµР· РїСЂРѕРІРµСЂРєРё РїРѕ РІСЂРµРјРµРЅРё вЂ” РїСЂРѕСЃС‚Рѕ РїСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ СЃРѕР±СЂР°РЅРѕ 8 С„СЂР°РіРјРµРЅС‚РѕРІ
    router.get('/:tg_id', authenticate, async (req, res) => {
      try {
        const tg_id = req.params.tg_id;
        const { rows: [player] } = await pool.query(
          `SELECT fragments FROM players WHERE tg_id = $1 LIMIT 1`,
          [tg_id]
        );
        if (!player) return res.status(404).json({ error: 'player not found' });
        const gotAll = (player.fragments || []).length === 8;
        return res.json({ canEnter: gotAll });
      } catch (e) {
        console.error('Error in GET /api/final/:tg_id', e);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    export default router;

===== FILE: routes\player.js =====
    // src/routes/player.js
    import express from 'express';
    import crypto  from 'crypto';
    import jwt     from 'jsonwebtoken';
    import { v4 as uuid } from 'uuid';
    import pool    from '../db.js';
    import { authenticate } from '../middleware/auth.js';
    
    const router = express.Router();
    const {
      JWT_SECRET,
      TON_WALLET_ADDRESS: TON_ADDR,
      FRAG_HMAC_SECRET
    } = process.env;
    
    const TONHUB_URL      = 'https://tonhub.com/transfer';
    const TONSPACE_SCHEME = 'ton://transfer';
    const AMOUNT_NANO     = 500_000_000; // 0.5 TON in nano
    const FRAGS           = [1,2,3,4,5,6,7,8];
    
    // вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”
    // 1) РҐРµР»РїРµСЂС‹ Рё Р»РѕРіРёРєР° burn
    // вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”
    
    function sign(user) {
      return jwt.sign(
        { tg_id: user.tg_id, name: user.name },
        JWT_SECRET,
        { expiresIn: '1h' }
      );
    }
    
    function randRef() {
      return crypto.randomBytes(6).toString('base64url');
    }
    
    async function genUniqueCode() {
      for (let i = 0; i < 8; i++) {
        const code = randRef();
        const { rows } = await pool.query(
          `SELECT 1 FROM players WHERE ref_code = $1 LIMIT 1`,
          [code]
        );
        if (!rows.length) return code;
      }
      return randRef();
    }
    
    /**
     * РћСЃРЅРѕРІРЅР°СЏ Р»РѕРіРёРєР° РІС‹РґР°С‡Рё С„СЂР°РіРјРµРЅС‚Р° РїРѕСЃР»Рµ РѕРїР»Р°С‚С‹
     */
    async function runBurnLogic(invoiceId) {
      console.log('[runBurnLogic] begin for', invoiceId);
      const client = await pool.connect();
      try {
        await client.query('BEGIN');
    
        // 1) Р·Р°Р±РёСЂР°РµРј РёРЅРІРѕР№СЃ
        const { rows: [inv] } = await client.query(
          `SELECT tg_id, processed
             FROM burn_invoices
            WHERE invoice_id=$1
              AND status='paid'
            FOR UPDATE`,
          [invoiceId]
        );
        if (!inv || inv.processed) {
          await client.query('ROLLBACK');
          return { newFragment: null, cursed: false, curse_expires: null };
        }
    
        // 2) Р·Р°Р±РёСЂР°РµРј РёРіСЂРѕРєР°
        const { rows: [pl] } = await client.query(
          `SELECT fragments FROM players WHERE tg_id=$1 FOR UPDATE`,
          [inv.tg_id]
        );
        const owned = pl.fragments || [];
    
        // 3) РІС‹РґР°С‘Рј РЅРѕРІС‹Р№ С„СЂР°РіРјРµРЅС‚
        const available = FRAGS.filter(f => !owned.includes(f));
        const pick = available.length
          ? available[crypto.randomInt(available.length)]
          : null;
    
        if (pick !== null) {
          await client.query(
            `UPDATE players
                SET fragments = array_append(
                                  coalesce(fragments,'{}'::int[]),
                                  $2::int
                                ),
                    last_burn  = NOW()
              WHERE tg_id = $1`,
            [inv.tg_id, pick]
          );
        } else {
          // РµСЃР»Рё РІСЃС‘ СЃРѕР±СЂР°РЅРѕ, РїСЂРѕСЃС‚Рѕ РѕР±РЅРѕРІР»СЏРµРј РІСЂРµРјСЏ
          await client.query(
            `UPDATE players SET last_burn = NOW() WHERE tg_id = $1`,
            [inv.tg_id]
          );
        }
    
        // 4) РїРѕРјРµС‡Р°РµРј РёРЅРІРѕР№СЃ РєР°Рє РѕР±СЂР°Р±РѕС‚Р°РЅРЅС‹Р№
        await client.query(
          `UPDATE burn_invoices
              SET processed = TRUE
            WHERE invoice_id = $1`,
          [invoiceId]
        );
    
        await client.query('COMMIT');
        console.log('[runBurnLogic] committed, pick=', pick);
        return { newFragment: pick, cursed: false, curse_expires: null };
    
      } catch (err) {
        await client.query('ROLLBACK');
        console.error('[runBurnLogic] error, rolled back', err);
        throw err;
      } finally {
        client.release();
      }
    }
    
    // вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”
    // 2) РџСѓР±Р»РёС‡РЅС‹Рµ РјР°СЂС€СЂСѓС‚С‹ (РґРѕ authenticate)
    // вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”вЂ”
    
    /**
     * POST /api/init
     */
    router.post('/init', async (req, res) => {
      console.log('[POST /api/init] body:', req.body);
      const { tg_id, name='', initData='', referrer_code=null } = req.body;
      if (!tg_id || !initData) {
        return res.status(400).json({ error: 'tg_id and initData required' });
      }
    
      try {
        // РїСЂРѕРІРµСЂРёРј, РµСЃС‚СЊ Р»Рё РёРіСЂРѕРє
        const { rows } = await pool.query(
          `SELECT 1 FROM players WHERE tg_id=$1`,
          [tg_id]
        );
        let player;
    
        if (!rows.length) {
          // РЅРѕРІС‹Р№ РёРіСЂРѕРє
          const client = await pool.connect();
          try {
            await client.query('BEGIN');
            const code = await genUniqueCode();
    
            const { rows:[me] } = await client.query(
              `INSERT INTO players
                 (tg_id,name,ref_code,referral_reward_issued)
               VALUES($1,$2,$3,FALSE)
               RETURNING *`,
              [tg_id, name.trim()||null, code]
            );
            player = me;
    
            // РµСЃР»Рё Р±С‹Р» СЂРµС„-РєРѕРґ вЂ” Р·Р°РїРёС€РµРј referral
            if (referrer_code) {
              const { rows:[ref] } = await client.query(
                `SELECT tg_id FROM players WHERE ref_code=$1 LIMIT 1`,
                [referrer_code.trim()]
              );
              if (ref) {
                await client.query(
                  `INSERT INTO referrals
                     (referrer_id,referred_id,status)
                   VALUES($1,$2,'confirmed')`,
                  [ref.tg_id, tg_id]
                );
              }
            }
    
            // РѕР±РЅРѕРІРёРј СЃС‡С‘С‚С‡РёРє СЋР·РµСЂРѕРІ
            await client.query(
              `UPDATE global_stats SET value=value+1 WHERE id='total_users'`
            );
    
            await client.query('COMMIT');
          } catch (e) {
            await client.query('ROLLBACK');
            console.error('[POST /api/init] transaction error', e);
            throw e;
          } finally {
            client.release();
          }
        } else {
          // СѓР¶Рµ РµСЃС‚СЊ вЂ” РїСЂРѕСЃС‚Рѕ С‡РёС‚Р°РµРј
          const { rows:[me] } = await pool.query(
            `SELECT * FROM players WHERE tg_id=$1`,
            [tg_id]
          );
          player = me;
        }
    
        // РІРѕР·РІСЂР°С‰Р°РµРј player + JWT
        const token = sign(player);
        return res.json({ user: player, token });
    
      } catch (err) {
        console.error('[POST /api/init] error', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * GET /api/player/:tg_id
     */
    router.get('/player/:tg_id', async (req, res) => {
      console.log('[GET /api/player]', req.params.tg_id);
      try {
        const { rows } = await pool.query(
          `SELECT tg_id,name,fragments,last_burn FROM players WHERE tg_id=$1`,
          [req.params.tg_id]
        );
        if (!rows.length) {
          return res.status(404).json({ error: 'player not found' });
        }
        return res.json(rows[0]);
      } catch (err) {
        console.error('[GET /api/player] error', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    // в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ
    // 3) Р’СЃРµ РґР°Р»СЊРЅРµР№С€РёРµ РјР°СЂС€СЂСѓС‚С‹ С‚СЂРµР±СѓСЋС‚ JWT
    router.use(authenticate);
    // в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ
    
    /**
     * GET /api/fragments/:tg_id
     */
    router.get('/fragments/:tg_id', async (req, res) => {
      console.log('[GET /api/fragments]', req.params.tg_id);
      try {
        const { rows:[p] } = await pool.query(
          `SELECT fragments FROM players WHERE tg_id=$1`,
          [req.params.tg_id]
        );
        if (!p) {
          return res.status(404).json({ error: 'player not found' });
        }
        return res.json({ fragments: p.fragments||[] });
      } catch (err) {
        console.error('[GET /api/fragments] error', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * POST /api/burn-invoice
     */
    router.post('/burn-invoice', async (req, res) => {
      console.log('[POST /api/burn-invoice]', req.body);
      const { tg_id } = req.body;
      if (!tg_id) {
        return res.status(400).json({ error: 'tg_id required' });
      }
      try {
        const invoiceId = uuid();
        const comment   = crypto.randomBytes(4).toString('hex');
        await pool.query(
          `INSERT INTO burn_invoices
             (invoice_id,tg_id,amount_nano,address,comment,status,created_at)
           VALUES($1,$2,$3,$4,$5,'pending',NOW())`,
          [invoiceId, tg_id, AMOUNT_NANO, TON_ADDR, comment]
        );
        return res.json({
          invoiceId,
          paymentUrl:  `${TONHUB_URL}/${TON_ADDR}?amount=${AMOUNT_NANO}&text=${comment}`,
          tonspaceUrl: `${TONSPACE_SCHEME}/${TON_ADDR}?amount=${AMOUNT_NANO}&text=${comment}`
        });
      } catch (err) {
        console.error('[POST /api/burn-invoice] error', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * GET /api/burn-status/:invoiceId
     */
    router.get('/burn-status/:invoiceId', async (req, res) => {
      // Р·Р°РїСЂРµС‚РёРј РєРµС€РёСЂРѕРІР°РЅРёРµ
      res.set('Cache-Control','no-store');
      console.log('[GET /api/burn-status]', req.params.invoiceId);
      try {
        const { rows:[inv] } = await pool.query(
          `SELECT status FROM burn_invoices WHERE invoice_id=$1`,
          [req.params.invoiceId]
        );
        if (!inv) {
          return res.status(404).json({ error: 'invoice not found' });
        }
        if (inv.status !== 'paid') {
          console.log('[GET /api/burn-status] still pending');
          return res.json({ paid: false });
        }
        const result = await runBurnLogic(req.params.invoiceId);
        console.log('[GET /api/burn-status] burnLogic:', result);
        return res.json({ paid: true, ...result });
      } catch (err) {
        console.error('[GET /api/burn-status] ERROR', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * GET /api/referral
     */
    router.get('/referral', async (req, res) => {
      console.log('[GET /api/referral] user:', req.user.tg_id);
      try {
        // С‡РёС‚Р°РµРј РєРѕРґ Рё СЃС‚Р°С‚СѓСЃ РІС‹РґР°С‡Рё
        const { rows:[p] } = await pool.query(
          `SELECT ref_code, referral_reward_issued
             FROM players
            WHERE tg_id=$1`,
          [req.user.tg_id]
        );
        if (!p) {
          return res.status(404).json({ error: 'player not found' });
        }
        // СЃС‡РёС‚Р°РµРј РїСЂРёРіР»Р°С€С‘РЅРЅС‹С…
        const { rows:[c] } = await pool.query(
          `SELECT COUNT(*) AS cnt
             FROM referrals
            WHERE referrer_id=$1
              AND status='confirmed'`,
          [req.user.tg_id]
        );
        // РѕР±РЅРѕРІРёРј С‚РѕРєРµРЅ (РѕР±РЅРѕРІР»С‘РЅРЅС‹Р№ JWT)
        res.setHeader('Authorization', `Bearer ${sign(req.user)}`);
        return res.json({
          refCode: p.ref_code,
          invitedCount: Number(c.cnt),
          rewardIssued: p.referral_reward_issued
        });
      } catch (err) {
        console.error('[GET /api/referral] ERROR', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * POST /api/referral/claim
     */
    router.post('/referral/claim', async (req, res) => {
      console.log('[POST /api/referral/claim] user:', req.user.tg_id);
      try {
        // Р±РµСЂС‘Рј С‚РµРєСѓС‰РёРµ РґР°РЅРЅС‹Рµ
        const { rows } = await pool.query(
          `SELECT fragments, referral_reward_issued
             FROM players
            WHERE tg_id=$1`,
          [req.user.tg_id]
        );
        if (!rows.length) {
          return res.status(404).json({ error: 'player not found' });
        }
        const p = rows[0];
        if (p.referral_reward_issued) {
          return res.status(400).json({ error: 'Reward already claimed' });
        }
        // СЃС‡РёС‚Р°РµРј РїСЂРёРіР»Р°С€С‘РЅРЅС‹С…
        const { rows:[c] } = await pool.query(
          `SELECT COUNT(*) AS cnt
             FROM referrals
            WHERE referrer_id=$1
              AND status='confirmed'`,
          [req.user.tg_id]
        );
        if (Number(c.cnt) < 3) {
          return res.status(400).json({ error: 'Not enough invited users' });
        }
        // РІС‹Р±РёСЂР°РµРј СЃР»СѓС‡Р°Р№РЅС‹Р№ РЅРµР·Р°РЅСЏС‚С‹Р№ С„СЂР°РіРјРµРЅС‚
        const owned     = p.fragments || [];
        const available = FRAGS.filter(f => !owned.includes(f));
        const pick      = available.length
          ? available[crypto.randomInt(available.length)]
          : null;
    
        // Р°РїРґРµР№С‚РёРј РјР°СЃСЃРёРІ
        await pool.query(
          `UPDATE players
             SET fragments = array_append(
                               coalesce(fragments,'{}'::int[]),
                               $2::int
                             ),
                 referral_reward_issued = TRUE
           WHERE tg_id = $1`,
          [req.user.tg_id, pick]
        );
    
        // РѕР±РЅРѕРІР»СЏРµРј JWT РІ Р·Р°РіРѕР»РѕРІРєРµ
        res.setHeader('Authorization', `Bearer ${sign(req.user)}`);
        return res.json({ ok: true, fragment: pick });
    
      } catch (err) {
        console.error('[POST /api/referral/claim] ERROR', err);
        return res.status(500).json({ error: 'internal' });
      }
    });
    
    /**
     * DELETE /api/player/:tg_id
     */
    router.delete('/player/:tg_id', async (req, res) => {
      console.log('[DELETE /api/player] user:', req.user.tg_id,
                  'target:', req.params.tg_id);
      if (String(req.user.tg_id) !== req.params.tg_id) {
        return res.status(403).json({ error: 'Forbidden' });
      }
      const client = await pool.connect();
      try {
        await client.query('BEGIN');
    
        // СѓРґР°Р»СЏРµРј РІСЃРµ referrals
        await client.query(
          `DELETE FROM referrals
            WHERE referrer_id=$1 OR referred_id=$1`,
          [req.user.tg_id]
        );
    
        // СѓРґР°Р»СЏРµРј РёРЅРІРѕР№СЃС‹
        await client.query(
          `DELETE FROM burn_invoices
            WHERE tg_id=$1`,
          [req.user.tg_id]
        );
    
        // СѓРґР°Р»СЏРµРј РёРіСЂРѕРєР°
        await client.query(
          `DELETE FROM players
            WHERE tg_id=$1`,
          [req.user.tg_id]
        );
    
        await client.query('COMMIT');
        return res.json({ ok: true });
    
      } catch (err) {
        await client.query('ROLLBACK');
        console.error('[DELETE /api/player] ERROR, rolled back', err);
        return res.status(500).json({ error: 'internal' });
      } finally {
        client.release();
      }
    });
    
    export default router;

===== FILE: routes\validate.js =====
    // routes/validate.js вЂ“ РїСЂРѕРІРµСЂРєР° РїРѕРґРїРёСЃРё Telegram initData
    import express from 'express';
    import crypto  from 'crypto';
    import dotenv  from 'dotenv';
    
    dotenv.config();
    
    const router    = express.Router();
    const BOT_TOKEN = process.env.BOT_TOKEN;          // Р·Р°РґР°С‘С‚СЃСЏ РІ .env
    
    router.post('/', (req, res) => {
      const { initData } = req.body;
    
      if (!initData || !BOT_TOKEN) {
        console.warn('[VALIDATE] вќЊ Missing initData or BOT_TOKEN');
        return res.status(400).json({ ok: false, error: 'Missing initData or token' });
      }
    
      try {
        /* в”Ђв”Ђ СЂР°СЃРєР»Р°РґС‹РІР°РµРј initData в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
        const parsed = new URLSearchParams(initData);
        const hash   = parsed.get('hash');
        parsed.delete('hash');               // СЃРёРіРЅР°С‚СѓСЂР° РЅРµ СѓС‡Р°СЃС‚РІСѓРµС‚ РІ РІС‹С‡РёСЃР»РµРЅРёРё
    
        const dataCheckString = [...parsed.entries()]
          .map(([k, v]) => `${k}=${v}`)
          .sort()
          .join('\n');
    
        /* в”Ђв”Ђ Telegram-Р°Р»РіРѕСЂРёС‚Рј в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
        const secretPart = BOT_TOKEN.includes(':')
          ? BOT_TOKEN.split(':')[1]          // "...:botHash" в†’ Р±РµСЂС‘Рј РІС‚РѕСЂСѓСЋ С‡Р°СЃС‚СЊ
          : BOT_TOKEN;
        const secret = crypto.createHash('sha256')
                              .update(secretPart)
                              .digest();
        const hmac   = crypto.createHmac('sha256', secret)
                             .update(dataCheckString)
                             .digest('hex');          // hex lower-case
    
        if (hmac !== hash) {
          console.warn('[VALIDATE] вќЊ Invalid signature');
          return res.status(403).json({ ok: false, error: 'Invalid signature' });
        }
    
        /* в”Ђв”Ђ СѓСЃРїРµС… в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
        const user = JSON.parse(parsed.get('user'));
        return res.json({ ok: true, user });
      } catch (err) {
        console.error('[VALIDATE ERROR]', err);
        return res.status(500).json({ ok: false, error: 'Internal error' });
      }
    });
    
    export default router;

===== FILE: routes\validateFinal.js =====
    // routes/validateFinal.js
    import express          from 'express';
    import jwt              from 'jsonwebtoken';
    import pool             from '../db.js';
    import { authenticate } from '../middleware/auth.js';
    
    const router = express.Router();
    const JWT_SECRET = process.env.JWT_SECRET;
    
    /** Р“РµРЅРµСЂР°С†РёСЏ РЅРѕРІРѕРіРѕ JWT */
    function generateToken(user) {
      return jwt.sign(
        { tg_id: user.tg_id, name: user.name },
        JWT_SECRET,
        { expiresIn: '1h' }
      );
    }
    
    // РџСЂРѕРїСѓСЃРєР°РµРј preflight, РїРѕС‚РѕРј вЂ” Р°СѓС‚РµРЅС‚РёС„РёРєР°С†РёСЏ
    router.options('/', (_req, res) => res.sendStatus(204));
    router.use(authenticate);
    
    /**
     * POST /api/validate-final
     *  1) РѕРєРЅРѕ РІРІРѕРґР° (С‡Р°СЃ+РјРёРЅСѓС‚Р° СЂРµРіРёСЃС‚СЂР°С†РёРё),
     *  2) РµСЃС‚СЊ 8 С„СЂР°РіРјРµРЅС‚РѕРІ,
     *  3) СЃС‚СЂРѕРєР° === `${ENV.TEMPLATE}-${nickname}` (Р±РµР· СѓС‡С‘С‚Р° СЂРµРіРёСЃС‚СЂР°).
     */
    router.post('/', async (req, res) => {
      const { userId, inputPhrase } = req.body;
      if (!userId || !inputPhrase) {
        return res
          .status(400)
          .json({ ok: false, error: 'Missing userId or inputPhrase' });
      }
    
      // РџСЂРѕРІРµСЂСЏРµРј С‚РѕРєРµРЅ
      if (String(req.user.tg_id) !== String(userId)) {
        return res.status(403).json({ ok: false, error: 'Forbidden' });
      }
    
      try {
        // Р‘РµСЂС‘Рј РёР· Р‘Р”
        const { rows } = await pool.query(
          `SELECT name, created_at, fragments
             FROM players
            WHERE tg_id = $1
            LIMIT 1`,
          [userId]
        );
        if (!rows.length) {
          return res.status(404).json({ ok: false, error: 'User not found' });
        }
        const { name, created_at, fragments } = rows[0];
        const created = new Date(created_at);
        const now     = new Date();
    
        // РћРєРЅРѕ: С‚РѕС‚ Р¶Рµ С‡Р°СЃ Рё РјРёРЅСѓС‚Р°
        const windowOpen =
             created.getHours()   === now.getHours() &&
             created.getMinutes() === now.getMinutes();
    
        const hasAllFragments =
          Array.isArray(fragments) && fragments.length === 8;
    
        if (!windowOpen || !hasAllFragments) {
          return res.status(400).json({
            ok: false,
            error:'Time window for final phrase has expired or fragments missing'
          });
        }
    
        // РЎРѕСЃС‚Р°РІР»СЏРµРј РѕР¶РёРґР°РµРјСѓСЋ С„СЂР°Р·Сѓ
        const template = (process.env.FINAL_PHRASE_TEMPLATE||'').trim();
        const expected = `${template}-${name}`.trim();
    
        // Р›РѕРіРё РґР»СЏ РґРµР±Р°РіР°
        console.log('[VALIDATE-FINAL] received:', JSON.stringify(inputPhrase));
        console.log('[VALIDATE-FINAL] expected:',  JSON.stringify(expected));
    
        // РЎСЂР°РІРЅРёРІР°РµРј case-insensitive
        if (inputPhrase.trim().toLowerCase() !== expected.toLowerCase()) {
          console.log('[VALIDATE-FINAL] MISMATCH');
          return res
            .status(400)
            .json({ ok: false, error: 'Incorrect final phrase' });
        }
    
        // РЈСЃРїРµС… в†’ РЅРѕРІС‹Р№ С‚РѕРєРµРЅ
        const newToken = generateToken(req.user);
        res.setHeader('Authorization', `Bearer ${newToken}`);
        return res.json({ ok: true });
    
      } catch (err) {
        console.error('[VALIDATE-FINAL ERROR]', err);
        return res
          .status(500)
          .json({ ok: false, error: 'Internal server error' });
      }
    });
    
    export default router;

===== FILE: worker\check-payments.js =====
    /* Order-of-Ash В· worker/check-payments.js вЂ” v2.2
       в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ
       вЂў Р±РѕР»СЊС€Рµ РќР•Рў В«РІРµС‡РЅРѕРіРѕВ» РєР»РёРµРЅС‚Р° в†’ РєР°Р¶РґСѓСЋ РёС‚РµСЂР°С†РёСЋ Р±РµСЂС‘Рј, РёСЃРїРѕР»СЊР·СѓРµРј, release
       вЂў С‚РµРј СЃР°РјС‹Рј pool-exhaustion РёСЃРєР»СЋС‡С‘РЅ
    */
    
    import 'dotenv/config.js';
    import fetch   from 'node-fetch';
    import pool    from '../db.js';
    import { setTimeout as wait } from 'timers/promises';
    
    /* в”Ђ env в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
    const {
      TON_WALLET_ADDRESS : ADDRESS,
      TONCENTER_API_KEY  : API_KEY,
      TON_RPC_ENDPOINT   : ENDPOINT = 'https://toncenter.com/api/v2',
      CHECK_INTERVAL_SEC : INTERVAL = 30
    } = process.env;
    
    /* в”Ђ helpers в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
    const b64urlDecode = str => {
      if (!str) return undefined;
      try   { return Buffer.from(str, 'base64url').toString('utf-8'); }
      catch { return str; }
    };
    const log = (...args) => console.log(...args);
    
    /* в”Ђ main loop в”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђв”Ђ */
    async function checkLoop() {
      log(`рџљЂ payment-checker started (every ${INTERVAL}s)`);
    
      while (true) {
        try {
          /* 1. pending invoices */
          const { rows: pending } = await pool.query(`
            SELECT invoice_id, tg_id, comment
              FROM burn_invoices
             WHERE status = 'pending'
          `);
    
          if (!pending.length) {
            await wait(INTERVAL * 1000);
            continue;
          }
    
          /* 2. last inbound tx */
          const url  = `${ENDPOINT}/getTransactions?address=${ADDRESS}&limit=40&decode=true`;
          const hdrs = API_KEY ? { 'X-API-Key': API_KEY } : {};
          const resp = await fetch(url, { headers: hdrs });
          const data = await resp.json();
          const txs  = data.result ?? [];
    
          const decoded = txs
            .map(t => ({
              nano: Number(t.in_msg?.value ?? 0),
              text: b64urlDecode(t.in_msg?.msg_data?.text)
            }))
            .filter(d => d.text);
    
          /* 3. РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј РєР°Р¶РґСѓСЋ РєРІРёС‚Р°РЅС†РёСЋ */
          for (const inv of pending) {
            const match = decoded.find(d =>
              d.text === inv.comment && d.nano >= 500_000_000
            );
            if (!match) continue;
    
            /* С‚СЂР°РЅР·Р°РєС†РёСЏ вЂ” РѕРґРёРЅ РєР»РёРµРЅС‚, Р°РІС‚РѕРєРѕРјРјРёС‚ OFF */
            const client = await pool.connect();
            try {
              await client.query('BEGIN');
    
              await client.query(
                `UPDATE burn_invoices
                    SET status = 'paid',
                        paid_at = NOW()
                  WHERE invoice_id = $1`,
                [inv.invoice_id]
              );
    
              await client.query(
                `UPDATE referrals
                    SET status     = 'confirmed',
                        updated_at = NOW()
                  WHERE referred_id = $1
                    AND status = 'pending'`,
                [inv.tg_id]
              );
    
              await client.query('COMMIT');
              log('вњ… invoice paid', inv.invoice_id);
            } catch (err) {
              await client.query('ROLLBACK');
              console.error('рџ”Ґ worker tx error:', err);
            } finally {
              client.release();
            }
          }
        } catch (err) {
          console.error('рџ”Ґ payment-checker loop error:', err);
        }
    
        await wait(INTERVAL * 1000);
      }
    }
    
    checkLoop().catch(err => {
      console.error('рџ”Ґ payment-checker startup error:', err);
      process.exit(1);
    });

