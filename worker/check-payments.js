/**
 * Payment-checker: –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
 *   1. —á–∏—Ç–∞–µ—Ç –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `pending`
 *   2. –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ TON
 *   3. –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –≤—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç—ë–∂ ‚â• 0.5 TON –∏ payload|comment
 *      —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å burn-uuid, –ø–æ–º–µ—á–∞–µ—Ç —Å—á—ë—Ç –∫–∞–∫ `paid`
 *
 * –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –ø–∏—à–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏:
 *   üöÄ —Å—Ç–∞—Ä—Ç, ‚è≥ —Å–ø–∏—Å–æ–∫ pending, üì• —Å–∫–æ–ª—å–∫–æ tx –ø–æ–ª—É—á–µ–Ω–æ,
 *   ‚Üí —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è,
 *   ‚úî –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏ —Å—á—ë—Ç –ø–æ–º–µ—á–µ–Ω ¬´paid¬ª.
 */

import fetch from 'node-fetch';
import pool  from '../db.js';
import { Buffer } from 'node:buffer';

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const STEP_MS   = 30_000;                              // –∏–Ω—Ç–µ—Ä–≤–∞–ª 30 —Å
const AMOUNT_NT = 500_000_000;                         // 0.5 TON –≤ –Ω–∞–Ω–æ
const ADDRESS   = process.env.TON_WALLET_ADDRESS;
const API_HOST  =
  process.env.TON_RPC_ENDPOINT || 'https://toncenter.com/api/v2';
const API_KEY   = process.env.TONCENTER_API_KEY || '';

if (!ADDRESS) { console.error('‚ùå TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω'); process.exit(1); }

// –≤ TonCenter –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
const HEADERS = API_KEY ? { 'X-API-Key': API_KEY } : {};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É–¥–æ–±–Ω—ã–µ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const sleep = ms => new Promise(r => setTimeout(r, ms));

/** –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö raw-tx (decode=false) */
async function getRaw(limit = 40) {
  const url = `${API_HOST}/getTransactions`+
              `?address=${ADDRESS}&limit=${limit}&archival=true`;
  const r   = await fetch(url, { headers: HEADERS }).then(r => r.json());
  return r.result || [];
}

/** –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å decode=true */
async function getTx(lt, hash) {
  const url = `${API_HOST}/getTransaction`+
              `?address=${ADDRESS}&lt=${lt}&hash=${hash}&decode=true`;
  const r   = await fetch(url, { headers: HEADERS }).then(r => r.json());
  return r.result;
}

/**
 * TonCenter –∫–ª–∞–¥—ë—Ç burn-uuid –ª–∏–±–æ –≤ msg_data.text (–æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
 * –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –≤ msg_data.payload - base64-BOC.  –î–æ—Å—Ç–∞—ë–º —Å—Ç—Ä–æ–∫—É –∏–∑ payload.
 * –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—á–µ–Ω—å –≥—Ä—É–±–æ: –∏–¥—ë–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ BOC
 * –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—á–∞—Ç–Ω—ã–µ UTF-8.
 */
function decodePayload(b64 = '') {
  try {
    const buf = Buffer.from(b64, 'base64');
    const ascii = [];
    for (const byte of buf) {
      // –ø–µ—á–∞—Ç–Ω—ã–µ ASCII + ¬´-¬ª
      if (byte >= 0x20 && byte <= 0x7E) ascii.push(byte);
      else if (ascii.length) break;
    }
    return Buffer.from(ascii).toString('utf8').trim();
  } catch { return ''; }
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function checkOnce() {
  // 1. –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ pending-–∏–Ω–≤–æ–π—Å–æ–≤
  const { rows: pend } = await pool.query(
    `SELECT invoice_id, comment
       FROM burn_invoices
      WHERE status = 'pending'`
  );
  console.log('‚è≥ pending:', pend.length, pend.map(p => p.invoice_id));

  if (!pend.length) return;

  // 2. –≥—Ä—É–∑–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const raws = await getRaw(40);
  console.log('üì• raw tx fetched:', raws.length);

  // 3. –¥–ª—è –∫–∞–∂–¥–æ–π –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
  for (const raw of raws) {
    if (!raw.in_msg) continue;                    // –≤—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ—Ç ‚Üí –ø—Ä–æ–ø—É—Å–∫
    const nano = Number(raw.in_msg.value || 0);
    if (nano < AMOUNT_NT) continue;              // –º–µ–Ω—å—à–µ 0.5 TON

    const { lt, hash } = raw.transaction_id;
    const tx   = await getTx(lt, hash);
    const md   = tx?.in_msg?.msg_data || {};
    const text = md.text || decodePayload(md.payload);
    console.log('‚Üí decoded', { lt, nano, text: text || 'undefined' });

    // 4. —Å–≤–µ—Ä—è–µ–º —Å –∫–∞–∂–¥—ã–º pending-—Å—á—ë—Ç–æ–º
    for (const inv of pend) {
      if (text === inv.comment) {
        await pool.query(
          `UPDATE burn_invoices
              SET status = 'paid', paid_at = NOW()
            WHERE invoice_id = $1`,
          [inv.invoice_id]
        );
        console.log('‚úî PAID', inv.invoice_id);
      }
    }

    await sleep(150);            // —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Ç–æ–Ω—Ü–µ–Ω—Ç—Ä
  }
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
console.log(`üöÄ Payment-checker started (interval ${STEP_MS/1000}s)`);

await checkOnce();               // –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å—Ä–∞–∑—É
setInterval(checkOnce, STEP_MS); // –¥–∞–ª–µ–µ –ø–æ —Ç–∞–π–º–µ—Ä—É
