// worker/check-payments.js
// ------------------------------------------------------------
// ‚öôÔ∏è  ENV (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π—Ç–µ –≤ Railway ‚Üí Variables)
//   DATABASE_URL         ‚Äî —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Postgres
//   TON_WALLET_ADDRESS   ‚Äî –≤–∞—à –∞–¥—Ä–µ—Å (UQ‚Ä¶ / EQ‚Ä¶)
//   TONCENTER_API_KEY    ‚Äî –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (TonCenter —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–ª—é—á–∞, –Ω–æ ‚Üí 60 rps)
//   CHECK_INTERVAL_MS    ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 30 000)
//   DEBUG_TX             ‚Äî =1 –¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//
// ------------------------------------------------------------
import dotenv             from 'dotenv';
import fetch              from 'node-fetch';
import { Pool }           from 'pg';
import { base64Decode }   from './lib/boc.js';   // ‚Üì –º–∞–ª–µ–Ω—å–∫–∞—è —É—Ç–∏–ª–∏—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

dotenv.config();

// ---------- DB ----------
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ---------- TonCenter ----------
const TON_ADDR   = process.env.TON_WALLET_ADDRESS;
const API_KEY    = process.env.TONCENTER_API_KEY || '';
const ENDPOINT   = 'https://toncenter.com/api/v2/getTransactions'
                 + `?address=${TON_ADDR}`
                 + '&limit=30&decode=true&archival=true&include_msg_body=true';

const headers = API_KEY ? { 'X-API-Key': API_KEY } : {};

// ---------- –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
async function loadPending() {
  const { rows } = await pool.query(`
      SELECT invoice_id, tg_id, comment
        FROM burn_invoices
       WHERE status = 'pending'
  `);
  return rows;                    // [{ invoice_id, tg_id, comment }, ‚Ä¶]
}

function extractComment(tx) {
  // 1) —Å–∞–º—ã–π –ª—ë–≥–∫–∏–π –ø—É—Ç—å ‚Äî TonCenter —Å–∞–º –∫–ª–∞–¥—ë—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
  const txt1 = tx?.in_msg?.msg_data?.text;
  if (txt1) return txt1.trim();

  // 2) –µ—Å–ª–∏ TonCenter –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ raw body (base64-BOC) ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
  const raw =
        tx?.in_msg?.msg_data?.body ??
        tx?.in_msg?.body ??
        tx?.body;

  if (!raw) return null;

  // –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ BOC
  try {
    const bytes = base64Decode(raw);              // Uint8Array
    const ascii = Buffer.from(bytes).toString('utf8');
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—á–∞—Ç–Ω—ã–µ ASCII 32-126
    const clean = ascii.replace(/[^\x20-\x7E]/g, '').trim();
    if (clean.length) return clean;
  } catch { /* ignore */ }

  return null;
}

async function markPaid(invoiceId) {
  await pool.query(`
      UPDATE burn_invoices
         SET status   = 'paid',
             paid_at  = now()
       WHERE invoice_id = $1
  `, [invoiceId]);
  console.log('üí∞ invoice paid', invoiceId);
}

async function scan() {
  const pending = await loadPending();
  if (!pending.length) return;                         // –Ω–∏—á–µ–≥–æ –∂–¥–∞—Ç—å
  console.log('‚è≥ pending:', pending.length,
              pending.map(p => `\n   ${p.comment}`).join(''));

  // –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
  const r   = await fetch(ENDPOINT, { headers });
  const res = await r.json();
  if (!res.ok) throw new Error(res.error || 'TonCenter error');

  const txs = res.result.filter(t => t.in_msg);        // —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ
  console.log('üì® raw tx fetched:', txs.length);

  // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
  if (process.env.DEBUG_TX === '1') {
    for (const tx of txs) {
      console.dir(tx, { depth: 6 });
    }
  }

  for (const tx of txs) {
    const comment = extractComment(tx);
    const value   = Number(tx?.in_msg?.value || 0);     // –≤ –Ω–∞–Ω–æ—Å–∞—Ö

    if (process.env.DEBUG_TX === '1') {
      console.log('  ‚Üí decoded',
        '{ lt:', `'${tx.utime}${tx.transaction_id?.lt ? '/' + tx.transaction_id.lt : ''}'`,
        ', nano:', value, ', text:', `'${comment}' }`);
    }

    if (!comment || value < 500_000_000) continue;      // < 0.5 TON

    const inv = pending.find(p => p.comment === comment);
    if (!inv) continue;                                // –Ω–µ –Ω–∞—à –ø–ª–∞—Ç—ë–∂

    await markPaid(inv.invoice_id);
  }
}

// ---------- —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ª—É–ø ----------
const INTERVAL = Number(process.env.CHECK_INTERVAL_MS) || 30_000;
console.log('üöÄ Payment-checker started (interval', INTERVAL / 1000, 's)');

setInterval(() => {
  scan().catch(err => console.error('‚ùå payment-checker error:', err));
}, INTERVAL);

// ------------------------------------------------------------
// mini-helper: –æ—á–µ–Ω—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ Base64 ‚Üí Uint8Array –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// ------------------------------------------------------------
function base64Decode(b64) {
  return Uint8Array.from(Buffer.from(
    b64.replace(/[-_]/g, m => (m === '-' ? '+' : '/'))
      .padEnd(Math.ceil(b64.length / 4) * 4, '='), 'base64'));
}
