import fetch from 'node-fetch';
import pool  from '../db.js';

const API_URL   = process.env.TON_RPC_ENDPOINT   || 'https://toncenter.com/api/v2';
const API_KEY   = process.env.TONCENTER_API_KEY  || '';            // –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π
const ADDRESS   = process.env.TON_WALLET_ADDRESS;                  // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
const AMOUNT_NT = 500_000_000;                                     // 0.5 TON –≤ nano
const PERIOD    = Number(process.env.PAYMENT_CHECK_INTERVAL_MS) || 30_000;

if (!ADDRESS) {
  console.error('‚ùå TON_WALLET_ADDRESS –Ω–µ –∑–∞–¥–∞–Ω');
  process.exit(1);
}

const HEADERS = API_KEY ? { 'X-API-Key': API_KEY } : {};

//----------------------------------------
// —É—Ç–∏–ª–∏—Ç—ã
//----------------------------------------
const utf8ToHex = (str) => Buffer.from(str, 'utf8').toString('hex');
const sleep     = (ms)  => new Promise(r => setTimeout(r, ms));

//----------------------------------------
// –∑–∞–ø—Ä–æ—Å N ¬´—Å—ã—Ä—ã—Ö¬ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//----------------------------------------
async function getRawTxs(limit = 30) {
  const url = `${API_URL}/getTransactions` +
              `?address=${ADDRESS}&limit=${limit}&archival=true`;
  const json = await fetch(url, { headers: HEADERS }).then(r => r.json());
  return json.result || [];
}

//----------------------------------------
// –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å decode=true
//----------------------------------------
async function getDecodedTx({ lt, hash }) {
  const url = `${API_URL}/getTransaction` +
              `?address=${ADDRESS}&lt=${lt}&hash=${hash}&decode=true`;
  const json = await fetch(url, { headers: HEADERS }).then(r => r.json());
  return json.result;
}

//----------------------------------------
// –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
//----------------------------------------
async function checkPending() {
  try {
    // 1. –±–µ—Ä—ë–º –≤—Å–µ ¬´pending¬ª —Å—á–µ—Ç–∞
    const { rows: pending } = await pool.query(
      `SELECT invoice_id, comment
         FROM burn_invoices
        WHERE status = 'pending'`
    );
    if (!pending.length) return;

    // 2. –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ raw-—Çx
    const raws = await getRawTxs(40);

    for (const raw of raws) {
      const nano = Number(raw.in_msg?.value || 0);
      if (nano < AMOUNT_NT) continue;               // –º–µ–Ω—å—à–µ 0.5 TON

      // 3. –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { lt, hash } = raw.transaction_id;
      const full = await getDecodedTx({ lt, hash });

      const md   = full.in_msg?.msg_data || {};
      const text = md.text;                         // –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç
      const hex  = md.payload;                      // –µ—Å–ª–∏ text –Ω–µ—Ç

      if (!text && !hex) continue;                  // –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

      // 4. –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ pending
      for (const inv of pending) {
        const wantTxt = inv.comment;
        const wantHex = utf8ToHex(wantTxt);

        if (text === wantTxt || (hex && hex.includes(wantHex))) {
          await pool.query(
            `UPDATE burn_invoices
                SET status = 'paid', paid_at = NOW()
              WHERE invoice_id = $1`,
            [inv.invoice_id]
          );
          console.log('‚úî invoice', inv.invoice_id, 'marked PAID');
        }
      }

      // ‚ñ∏ –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–æ–º–±–∏—Ç—å TonCenter
      await sleep(120); // ~8-9 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    }
  } catch (err) {
    console.error('‚ùå payment-checker error:', err.message);
  }
}

//----------------------------------------
// –∑–∞–ø—É—Å–∫
//----------------------------------------
console.log(`üöÄ Payment-checker started (interval ${PERIOD / 1000}s)`);
await checkPending();               // –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
setInterval(checkPending, PERIOD);  // –¥–∞–ª–µ–µ –ø–æ —Ç–∞–π–º–µ—Ä—É